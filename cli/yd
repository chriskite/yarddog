#!/usr/bin/env ruby

## libraries
# stdlib
require 'pathname'
require 'tmpdir'
# external
require 'commander/import'
never_trace!
require 'highline/import'
require 'rest_client'

class Rest
    DEFAULT_URL = 'http://localhost:3000'

    def initialize args, options
        @args = args
        @options = options
        @url = resolve_url
        @site = RestClient::Resource.new(@url)
    end

    protected
    def resolve_url
        return @options.url unless @options.url.nil?
        if ENV["YARDDOG_URL"] && !ENV["YARDDOG_URL"].empty?
            return ENV["YARDDOG_URL"]
        elsif @options.dir && File.exists?("#{@options.dir}/.yarddog.conf") \
            && !(s = File.new("#{@options.dir}/.yarddog.conf").read.strip).empty?
            return s
        elsif File.exists?("#{ENV['HOME']}/.yarddog.conf") \
            && !(s = File.new("#{ENV['HOME']}/.yarddog.conf").read.strip).empty?
            return s
        else
            warn "Using the default URL #{DEFAULT_URL}." 
            return DEFAULT_URL
        end
    end

end

class Runner < Rest
    TARNAME = 'run.tar.gz'

    def initialize args, options
        super args, options
        @dir = resolve_dir Pathname.new(options.dir || Dir.getwd)
    end

    def run
        request = mkrequest()
        #@site['/runs'].post request
        puts request
        FileUtils.remove_entry @tmp
    end

    protected
    def mkrequest 
        warn 'The container will be started using the commands in the Dockerfile.' if @args.empty?
        @tmp = Dir.mktmpdir
        tarfile = "#{@tmp}/#{TARNAME}"
        unless system "tar -cz -f #{tarfile} #{@dir}"
            fail "Could not make tar in #{tarfile}" 
        end
        shasum = `shasum #{tarfile}`.split()[0]
        puts "made tar #{tarfile}, sha = #{shasum}"
        request = { sha1: shasum, source_tgz: File.new(tarfile, 'rb') }
        request[:command] = @args unless @args.empty?
        request[:instance_type] = @options.type unless @options.type.nil?
        return request
    end

    protected
    def resolve_dir path
        if path.directory?
            if (path + 'Dockerfile').exist?
                return path
            else
                fail "The directory specified (#{path}) does not have a Dockerfile"
            end
        elsif path.file?
            puts path.basename
            if path.basename.to_s == 'Dockerfile' 
                # might want to add a check here if the file is actually a Dockerfile and not just named that.
                return path.dirname
            else
                fail 'You did not specify a valid Dockerfile'
            end
        else
            fail "Invalid path (#{path})"
        end
    end

end

class Scheduler < Runner

    def initialize args, options
        if options.cron
            @cron = cron_validate options.cron
        else
            fail 'The schedule command requires the -c option. Try schedule --help for more information'
        end
        args_warning
        super args, options
    end

    def schedule
        # TODO: api not finished yet
        # probably something like:
        # request = mkrequest()
        # request[:schedule] = parse_time
        # @site['/runs'].post request
    end

    protected
    def cron_validate
    end

    def args_warning
    end

end


class Getter < Rest

    def status
        if @args.empty?
            puts "site['/runs'].get"
        else
            puts "site['/runs/' + #{@args[0]}].get"
        end
    end

    def stop
        fail 'Please provide a job ID to terminate.' if @args.empty?
        puts "site['/runs' + '#{@args[0]}'].delete"
    end

end

## commander config
program :version, '0'
program :description, 'CLI for Yarddog, a utility to manage docker containers in virtual servers'

command :run do |c|
    c.syntax = 'yd run [-d directory/Dockerfile] [-u url] [-t type] -- <command [args...]>'
    c.description = 'Build a docker image and run <command> on the cluster.'
    c.option '-d', '--dir directory/Dockerfile', String, 'specify the directory with a Dockerfile at its root.'
    c.option '-u', '--url http://localhost:3000', String, 'specify the URL of the yarddog server'
    c.option '-t', '--type instance_type', String, 'specify the type of instance on which the command should be run'
    c.action { |args, options| Runner.new(args, options).run }
end

command :schedule do |c|
    c.syntax = 'yd schedule [-d directory/Dockerfile] [-u url] <-c "quoted cron string"> -- <command [args...]>'
    c.description = 'Schedule a run command to happen in the future or periodically.'
    c.option '-d', '--dir directory/Dockerfile', String, 'specify the directory with a Dockerfile at its root.'
    c.option '-u', '--url http://localhost:3000', String, 'specify the URL of the yarddog server'
    c.option '-t', '--type instance_type', String, 'specify the type of instance on which the command should be run'
    c.option '-c', '--cron "cronjob string"', String, 'use cron syntax to specify a schedule for the command. This option is required. IMPORTANT: Make sure your cron string is "enquoted", otherwise the shell may expand special characters and the <command [args...]> will be incorrect.'
    c.action { |args, options| Scheduler.new(args, options).schedule }
end

command :status do |c|
    c.syntax = 'yd status [-u url] [jobid]'
    c.description = 'Get the status of a command running now or scheduled later.'
    c.option '-u', '--url http://localhost:3000', String, 'specify the URL of the yarddog server'
    c.action { |args, options| Getter.new(args, options).status }
end
alias_command :ls, :status

command :stop do |c|
    c.syntax = 'yd stop [-u url] <jobid>'
    c.option '-u', '--url http://localhost:3000', String, 'specify the URL of the yarddog server'
    c.description = 'Attempt to stop a running command by its <jobid>'
    c.action { |args, options| Getter.new(args, options).stop }
end
