#!/usr/bin/env ruby

## libraries
# stdlib
require 'tmpdir'
# gems
require 'commander/import'
require 'highline/import'
require 'rest_client'
# this project
require_relative '../lib/yarddog-conf'

API_VERSION=1

## commander config
program :version, '0'
program :description, 'CLI for Yarddog, a utility to manage docker containers in virtual servers'
always_trace!
#never_trace! unless $DEBUG
ENV['PAGER'] = 'cat' # disable paging
default_command :help # display help when no command is given

# automate commander config
def add_command name, desc, cls, *aliases
    command name.to_sym do |c|
        c.syntax = 'yd ' + name.to_s + ' ' + cls.specific_syntax + ' ' + cls.specific_args
        c.description = desc
        cls.specific_options c
        c.action { |args, options| cls.new(args, options).run! }
    end
    aliases.each do |a|
        alias_command a.to_sym, name.to_sym
    end
    name.match /-/ do |match|
        alias_command name.sub(/-/, ' ').to_sym, name.to_sym
    end
end

class Rest
    DEFAULT_URL = 'http://localhost:3000/api/v1/'

    def self.specific_options c
        c.option '-u', '--url http://localhost:3000', String, 'specify the URL of the yarddog server'
    end

    def self.specific_syntax
        '[-u url]'
    end

    def self.specific_args
        ''
    end

    def run!
    end

    def initialize args, options
        @args = args
        @options = options
        @ini = YarddogConf.new.parse_home_file.parse_file(Dir.getwd)
        @conf = @ini['Client']
        @token = @conf['token']
        resolve_url
        @site = RestClient::Resource.new(@url)
    end

    protected
    def check_token
        unless @token
            fail "No token found. Please create one and put at least your API token on a line beginning with ‘token = ’ in your config file"
        end
    end

    protected
    def resolve_url
        if @options.url
            @url = @options.url
        elsif ENV["YARDDOG_URL"] && !ENV["YARDDOG_URL"].empty?
            @url = ENV["YARDDOG_URL"]
        elsif @conf['url']
            @url = @conf['url']
        else
            warn "Using the default URL #{DEFAULT_URL}." 
            @url = DEFAULT_URL
        end
        @url += '/' unless @url.end_with? '/'
        validator = %r|api/v#{API_VERSION}/$|
        unless @url =~ validator
            fail "Improper API Version or invalid URL. You provided ‘#{@url}’ but the required API version is v#{API_VERSION}"
        end
    end

end

class Runner < Rest
    TARNAME = 'source.tar'
    GZNAME  = 'source.tar.gz'

    def self.specific_options c
        super c
        c.option '-d', '--dir ./Dockerfile', String, 'specify the directory with a Dockerfile at its root.'
        c.option '-t', '--type c3.xlarge', String, 'specify the type of instance on which the command should be run'
    end

    def self.specific_syntax
        super + ' [-d directory/Dockerfile] [-t instance_type]'
    end

    def self.specific_args
        '<command [args...]>'
    end

    def initialize args, options
        super args, options
        @dir = resolve_dir File.new(options.dir || Dir.getwd)
        @ini.parse_file @dir # Runner has additional information to share with conf, the -d option
        @conf = @ini['Client']
    end

    def run!
        check_token
        make_tar do |tar, sha|
            request = {sha1: sha, token: @token, source_tgz: tar}
            request[:type] = @options.type if @options.type
            request[:args] = @args unless @args.empty?
            puts request.inspect
            send! request
        end
    end

    protected
    def send! request
        tar = request[:source_tgz]
        request.delete :source_tgz
        response1 = @site['runs'].post request
    rescue RestClient::RequestFailed => e
        if e.http_code == 400
            request[:source_tgz] = tar
            request.delete :sha1
            response2 = @site['runs'].post request
        else
            fail e
        end
    end

    # make sure to delete the tar afterward
    protected
    def make_tar
        warn 'The container will be started using the commands in the Dockerfile.' if @args.empty?
        @tmp = Dir.mktmpdir
        tarname = File.join(@tmp, TARNAME)
        gzname  = File.join(@tmp, GZNAME)
        unless system "tar -c -f '#{tarname}' '#{@dir}' 2>/dev/null"
            fail "Could not make tar in ‘#{tarname}’: child exited with status #{$?}"
        end
        unless system "gzip -nk #{tarname}"
            fail "Could not gzip ‘#{tarname}’ into ‘#{gzname}’: child exited with status #{$?}"
        end
        shasum = `shasum #{tarname}`.split()[0]
        file = File.new gzname
        yield file, shasum 
    ensure
        FileUtils.remove_entry @tmp
    end

    # might want to add a check here if the file is actually a Dockerfile and not just named that.
    protected
    def resolve_dir file
        if File.directory?(file)
            if (file = (File.join(file, 'Dockerfile'))) && File.exist?(file)
                return File.dirname(file)
            else
                fail "The directory specified (#{file}) does not have a Dockerfile"
            end
        elsif File.file?(file)
            if File.basename(file) == 'Dockerfile' 
                return file
            else
                fail 'You did not specify a valid Dockerfile'
            end
        else
            fail "Invalid file (#{file})"
        end
    end

end
add_command("run", 'Build a docker image and run <command> on the cluster.', Runner)

class Scheduler < Runner

    def self.specific_options c
        super c
        c.option '-c', '--cron "cronjob string"', String, 'use cron syntax to specify a schedule for the command. This option is required. IMPORTANT: Make sure your cron string is "enquoted", otherwise the shell may expand special characters and the <command [args...]> will be incorrect.'
    end

    def self.specific_syntax
        super + ' [-c "cron string"]'
    end

    def initialize args, options
        unless options.cron
            fail 'The schedule command requires the -c option. Try schedule --help for more information'
        end
        super args, options
    end

    def schedule
        # TODO: api not finished yet
        # probably something like:
        # tar, sha = make_tar
        # request[:schedule] = @options.cron
        # request = {sha1: sha, token: @token}
        # request[:type] = @options.type if @options.type
        # request[:args] = @args if @args
        # send! request
    end

end
add_command("schedule", 'Schedule a run command to happen in the future or periodically.', Scheduler, 'cron')

class Status < Rest
    def run!
        check_token
        if @args.empty?
            response = @site['runs'].get params: {token: @token}
            puts response.to_s
        else
            response = @site['runs/' + @args[0]].get params: {token: @token}
            puts response.to_s
        end
    end
end
add_command("status", 'Get the status of a command running now or scheduled later.', Status, 'ls')

class Stop < Rest
    def self.specific_args
        '<job ID>'
    end
    def run!
        check_token
        fail 'Please provide a job ID to terminate.' if @args.empty?
        response = @site['runs' + @args[0].to_s].delete params: {token: @token}
        puts response.to_s
    end
end
add_command("stop", 'Attempt to stop a running command by its <jobid>', Stop)

class User_info < Rest
    def self.specific_args
        '<user ID>'
    end
    def run!
        check_token
        response = @site['users/' + @args[0].to_s].get params: {token: @token}
        puts response.to_s
    end
end
add_command("user-info", 'List information about a user specified by <user ID>', User_info, "info", "user")

class Create_user < Rest
    def self.specific_args 
        '<email>'
    end
    def run!
        check_token
        response = @site['users'].post email: @args.join, token: @token
        puts response.to_s
    end
end
add_command("create-user", 'Create a user specified by <email>', Create_user, "create")

class Delete_user < Rest
    def self.specific_args
        '<user ID>'
    end
    def run!
        check_token
        response = @site['users/' + @args[0].to_s].delete params: {token: @token}
        puts response.to_s
    end
end
add_command("delete-user", 'Delete a user specified by <user ID>', Delete_user, "delete")
